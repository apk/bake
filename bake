#!/usr/bin/env ruby

$errcnt = 0

def is_valid_name x
  x =~ /^[A-Za-z][A-Za-z0-9]*$/
end

class Def

  attr_reader :name, :args, :body

  def initialize n, a, b
    @name=n
    @args=a
    @body=b
  end

  def run_on node, acts, scope
    # First create variable bindings
    acts=acts.clone
    sc=scope.mksub
    @args.each do |n|
      if n =~ /^\*(.*)$/
        # Should be last, but we checked at definition time
        sc.setvar n,acts
      else
        a=acts.shift
        error "Too few args" if not a
        sc.setvar n,a
      end
    end
    if not node.subs.empty?
      node.error "Can't run definition on nonempty node"
      return
    end
    @body.each { |x| x.eval sc }
  end

end

class Target

  @@map={}

  attr_reader :name

  def Target.find n
    @@map[n]
  end

  def Target.make n
    @@map[n] || Target.new(n)
  end

  def initialize n
    @@map[n]=self
    @name=n
    @acts=[]
    @deps=[]
  end

  def dep n
    if n.instance_of? Target
      @deps <<= n
    else
      @deps <<= Target.make n
    end
  end

  def say n
    act([:echo, n])
  end

  def act n
    @acts <<= n
  end

  def Target.dump_all
    @@map.each_value { |n| n.dump }
  end

  def dump
    puts "Target #{@name.inspect}"
    @deps.each do |d|
      puts "   Dep #{d.name.inspect}"
    end
    @acts.each do |a|
      puts "   #{a.inspect}"
    end
  end

  def build
    if not @built
      puts "Build " + @name.inspect
      ts = nil

      @deps.each do |t|
        # XXX How do we handle things that don't exist,
        # and how do we decide whether we can build it
        # (and can assume it exists when we ran the
        # commands) or whether it is only a source.
        pts = t.build
        return nil if not pts # Failure of some kind (XXX impl -k here)
        ts = pts if (not ts) || (pts > ts)
      end

      exe=true
      if @name.instance_of? String
        begin
          @timestamp = File.mtime(@name)
          exe=false if ts && @timestamp > ts
        rescue Errno::ENOENT
          # We just build anew (XXX we may take the timestamp
          # after building and see whether it was touched or
          # came into existence at all. If it is not touched
          # we could either optimize the build by not rebuilding
          # dependencies, or we could complain.
          @timestamp = Time.now
        end
      else
        @timestamp = Time.now
      end

      if exe
        @acts.each do |a|
          cmd=a[0]
          case cmd
          when String
            puts "Run: #{a.inspect}"
            if a.length > 1
              if system *a
                #
              else
                # This build failed
                return nil
              end
            else
              error "No arguments on command -- exec would behave strangely"
            end
          when :echo
            puts "      - " + a[1..-1].to_s
          when :mkdirrm
            puts "mkdir/rm: #{a.inspect}"
            a[1..-1].each do |n|
              makedirsof(n)
              begin
                File.unlink(n)
              rescue Errno::ENOENT
                # Ok, the file wasn't there to begin with
              end
            end
          else
            puts "Bad action " + a.inspect
            error "Bad command in action"
          end
        end
        # XXX Hacked; we need to think about the proper timestamp
        # of targets that are actually just dependencies
        @timestamp = Time.now if not @acts.empty?
      end

      @built=@timestamp
    end
    puts "Built " + @name.inspect
    # Need to return build timestamp
    @built
  end

end

def makedirsof n
  n = String.new(n)
  if n.gsub!(/\/+[^\/]*$/, "")
    if File.directory?(n)
    else
      makedirsof n
      # If this fails we deserve it...
      Dir.mkdir(n)
    end
  end
end

class Scope

  attr_reader :parent

  def initialize p
    @parent=p
    @map={}
    @defs={}
  end

  def mksub
    Scope.new self
  end

  def setvar n, v
    @map [n] = v;
    puts "\t\t- Set #{n.inspect}=#{v.inspect}" # XXX on #{source}"
  end

  def getvar n, d
    r = @map [n]
    if not r
      if @parent
        r = @parent.getvar n, d
      end
      r = d unless r
    end
    r
  end

  def get_def n
    # puts "Lkup def #{n.inspect} on #{@line}:#{self} (#{@defs[n]})"
    @defs[n] || (parent ? parent.get_def(n) : nil)
  end

  def add_def d
    # puts "Set def #{d.name} on #{@line}"
    if @defs[d.name]
      error "Overriding #{d.name}"
    end
    @defs[d.name]=d
  end
  
end

class Node
  # attr_reader :bt, :et, :day, :mon, :proj, :txt, :cnt

  attr_reader :indent, :line, :parent, :source
  attr_reader :subs

  def initialize i, l, p, sa
    @indent=i
    @line=l
    @parent=p
    @source=sa
    @subs = []
    @map={}
    @defs={}
  end

  def setvar n, v
    @map [n] = v;
    puts "\t\t- Set #{n.inspect}=#{v.inspect} on #{source}"
  end

  def getvar n, d
    r = @map [n]
    if not r
      if @parent
        r = @parent.getvar n, d
      end
      r = d unless r
    end
    r
  end

  def add l
    @subs <<= l
  end

  def show pref
    puts "#{pref}#{@line}"
    pref += "  "
    @subs.each do |x|
      x.show pref
    end
  end

  def eval scope
    # XXX This splitting does a bit too much; we may want
    # to keep spaces in commands like 'let a "pre  post"'
    # (depending on the command type?)
    a=@line.split
    if a.length == 0
      error "Bad line"
    else
      s="cmd_#{a[0].gsub(/[A-Z]/) {|x| "_#{x.downcase}" }}".to_sym
      if respond_to? s
      then
        send s, a[1..-1], scope
      else
        d = scope.get_def a[0]
        if d
          d.run_on self, a[1..-1], scope
        else
          error "Bad cmd #{a[0]} with #{a.inspect}"
        end
      end
    end
  end

  def error s
    puts "#{source}: #{s} (#{@line})"
    $errcnt += 1
  end
  
  def evalsubs scope
    @subs.each { |x| x.eval scope }
  end

  def showsubs
    @subs.each do |x|
      puts "    Sub: #{x.line}"
      x.showsubs
    end
  end

  def cmd__group a, scope
    puts "Group called: #{a.inspect}"
    evalsubs scope.mksub
  end

  def cmd__library a, scope
    puts "Library called: #{a.inspect}"
    if a.length != 1
      error "Need one arg"
    else
      sc=scope.mksub
      name = a[0]
      coll = []
      sc.setvar :objcoll, coll
      sc.setvar "srcdir", ""
      evalsubs sc

      ofn = "zz/lib/" + name + ".a"
      t = Target.make(ofn)
      a = ["ar", "rs", ofn]
      coll.each do |x|
        t.dep x
        a <<= x.name
      end
      t.say "Link #{ofn} (#{a.length} files)"
      t.act([:mkdirrm, ofn])
      t.act a

      Target.make(:lib).dep t
      
    end
  end

  def cmd__with_src_dir a, scope
    puts "WithSrcDir called: #{a.inspect}"
    if a.length != 1
      error "Need one arg"
    else
      sc=scope.mksub
      sc.setvar "srcdir", sc.getvar("srcdir","") + a[0] + "/"
      evalsubs sc
    end
  end

  def cmd__with_inc_dir a, scope
    puts "WithIncDir called: #{a.inspect}"
    if a.length != 1
      error "Need one arg"
    else
      sc=scope.mksub
      i = sc.getvar :incdirs, nil
      i ||= []
      i = i.clone << (sc.getvar("srcdir","") + a[0])
      sc.setvar :incdirs, i
      evalsubs sc
    end
  end

  def cmd__inc_dir a, scope
    puts "IncDir called: #{a.inspect}"
    if a.length != 1
      error "Need one arg"
    else
      i = scope.getvar :incdirs, nil
      i ||= []
      i = i << (scope.getvar("srcdir","") + a[0])
      scope.setvar :incdirs, i
    end
    if not @subs.empty?
      error "IncDir can't have subnodes"
    end
  end

  def compcommon n, suf, cc, scope
    b = scope.getvar("srcdir", "") + n
    sfn = b + suf
    ofn = "zz/obj/" + b + ".o"

    t = Target.make(ofn)
    t.dep(sfn)
    t.say("Compile #{sfn}")
    t.act([:mkdirrm,ofn])
    cm=["gcc","-c","-o",ofn]
    i = scope.getvar :incdirs, nil
    if i
      i.each { |x| cm <<= "-I#{x}" }
    end
    cm <<= sfn
    t.act cm
               
    Target.make(:obj).dep t

    oc = scope.getvar :objcoll, nil
    if oc
      oc <<= t
    end
  end

  def cmd__c_source a, scope
    puts "SrcDir called: #{a.inspect}"
    a.each do |n|
      if n =~ /[a-z][a-z0-9\/]*/
        compcommon n, ".c", "gcc", scope
      else
        error "Bad filename '#{n}'"
      end
    end
  end

  def cmd__cpp_source a, scope
    puts "SrcDir called: #{a.inspect}"
    a.each do |n|
      if n =~ /[a-z][a-z0-9\/]*/
        compcommon n, ".cpp", "g++", scope
      else
        error "Bad filename '#{n}'"
      end
    end
  end

end

class << Object

  def run_on
  end

end

basescope=Scope.new(nil)

class BaseDef
  attr_reader :name
  def initialize n
    @name = n
  end
end

c=BaseDef.new "def"
def c.run_on node, acts, scope
  puts "Def called: #{acts.inspect}"
  name=acts[0]
  if !is_valid_name(name)
    error "No or bad def name '#{name}'"
    return
  end
  if acts.size > 1
    last=acts[-1]
    if !is_valid_name(last)
      if last[0..0]!= "*" || !is_valid_name(last[1..-1])
        error "Bad last arg name in def"
        return
      end
    end
    acts[1..-2].each do |x|
      if !is_valid_name(x)
        error "Bad nonlast arg name in def"
        return
      end
    end
  end
  puts "Args ok"
  d=Def.new name, acts[1..-1], node.subs
  scope.add_def d
end
basescope.add_def c

top=Node.new(-1, "Group", nil, "init:0")
curr=top

file="Bakefile"
lno=0
File.open(file).entries.each do |l|
  lno += 1
  l.chomp!
  next if l =~ /^ *;/
  next if l =~ /^ *#/
  next if l =~ /^ *$/
  if l =~ /\t/
    puts "Tab in bakefile: #{l.inspect}"
    exit 1
  end
  l =~ /^( *)/
  i = $1.length
  # puts "#{i}: #{l.inspect}"
  while curr.indent >= i
    curr = curr.parent
  end
  n = Node.new(i, l, curr, "#{file}:#{lno}")
  curr.add n
  curr = n
end

top.show "* "

top.eval basescope.mksub

Target.dump_all

t = Target.find :lib
if t
  t.build
end

# Local variables:
# mode: ruby
# compile-command: "ruby bake"
# End:
